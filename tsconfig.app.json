{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    // 在 .tsx文件里支持JSX
    "jsx": "preserve",
    // 严格模式
    "strict": true,
    // 启动
    "sourceMap": true,
    // 目标转化语法（ts -> js(es5/6/7)）
    "target": "ESNext",
    // 编译的规范,目标代码需要使用的模块化方案(commonjs require/module.exports/es module import/export)，常写umd，代表支持多种模块化
    "module": "ESNext",
    // 解析规则,按照node方式去解析模块 import "/index.node .json .js"
    "moduleResolution": "Node",
    // 辅助导入功能
    "importHelpers": true,
    // es6 和 commonjs 转化
    // 跳过一些库的类型检测(axios本身会定义很多类型，提高性能，有可能多个库的类型命名会冲突)
    "skipLibCheck": true,
    // export default/module.exports = {}是否能混合使用
    // es module / commonjs 是否能混合使用
    "esModuleInterop": true,
    // 删除编译后的所有的注释
    "removeComments": true,
    // 编译的路径解析，使用@/components会在src/components中寻找
    // 文件路径在解析时的基本的url
    "baseUrl": ".",
    // 指定输出目录
    "outDir": "./dist/",
    // 可以指定在项目中可以使用哪些库的类型(Proxy/Window/Document)
    "lib": ["ESNext", "DOM", "dom.iterable", "scripthost"],
    // 路径引用前缀
    "paths": {
      "@/*": ["./src/*"]
    },
    // ↓禁止对同一个文件的不一致的引用。
    "forceConsistentCasingInFileNames": true,
    // ↓允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "allowSyntheticDefaultImports": true,
    // 在表达式和声明上有隐含的 any类型时报错
    "noImplicitAny": true,
    // 有未使用的变量时，抛出错误
    "noUnusedLocals": true,
    // 有未使用的参数时，抛出错误
    "noUnusedParameters": true,
    // 并不是所有函数里的代码都有返回值时，抛出错误
    "noImplicitReturns": true,
    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）
    // "noFallthroughCasesInSwitch": true,
    // 启用装饰器
    // "experimentalDecorators": true,
    // 为装饰器提供元数据的支持
    // "emitDecoratorMetadata": true
    "noEmit": true,
    "isolatedModules": true,
    "resolveJsonModule": true,
    "useDefineForClassFields": true,
  },
  "inclues": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
  ]
}
